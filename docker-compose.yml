services:
  django:
    container_name: django
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfiles/django/Dockerfile
    expose:
      - 8080
    depends_on:
      - db
      - s3
    command: >
      sh -c "python manage.py collectstatic --noinput &&
            python manage.py migrate &&
            bash gunicorn.sh"
    networks:
      - nginx_network
      - db_network
      - s3_network
      - cache_network
    environment:
      PG_NAME: postgres
      PG_USER: postgres
      PG_HOST: db
      PG_PORT: "5432"
      PG_PASSWORD: postgres
      SECRET_KEY: weofjweifjewifjewifjewfewf
      DEBUG: "0"
      ALLOWED_HOSTS: "*"
      REDIS_HOST: "cache"
      REDIS_PORT: "6379"
      AWS_S3_ENDPOINT_URL: http://s3:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      DATETIME_FORMAT: "%Y-%m-%d %H:%M"

  fastapi:
    container_name: fastapi
    restart: unless-stopped
    environment:
      PG_NAME: postgres
      PG_USER: postgres
      PG_HOST: db
      PG_PORT: "5432"
      PG_PASSWORD: postgres
      DATETIME_FORMAT: "%Y-%m-%d %H:%M"
      POSTS_TO_LOAD: "20"
      MESSAGES_TO_LOAD: "30"
      AWS_S3_ENDPOINT_URL: http://s3:9000
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    expose:
      - 8080
    depends_on:
      - db
      - s3
    command: >
      sh -c "uvicorn app.main:app --reload --host 0.0.0.0 --port 8080 --workers 1"
    networks:
      - nginx_network
      - db_network
      - s3_network

  db:
    container_name: db
    image: postgres:17.6-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    expose:
      - 5432
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-p", "5432", "-h", "db"]
    networks:
      - db_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G

  client:
    container_name: client
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfiles/react/Dockerfile
    ports:
      - 80:80
    depends_on:
      - django
      - fastapi
    networks:
      - nginx_network

  s3:
    container_name: s3
    image: minio/minio:latest
    restart: unless-stopped
    expose:
      - 9000
    command: server --address :9000 /data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    networks:
      - s3_network

  cache:
    container_name: cache
    restart: unless-stopped
    image: redis:7.2-alpine
    expose:
      - 6379
    command: redis-server
    volumes: 
      - cache:/data
    networks:
      - cache_network

volumes:
  pgdata:
    driver: local
  cache:
    driver: local

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge
  s3_network:
    driver: bridge
  cache_network:
    driver: bridge
