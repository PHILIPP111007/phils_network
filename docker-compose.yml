version: "3.9"

services:
  service:
    container_name: service
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./Services/django/Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - db
      - cache
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             bash gunicorn.sh"
    environment:
      PG_NAME: postgres
      PG_USER: postgres
      PG_HOST: db
      PG_PORT: "5432"
      PG_PASSWORD: postgres
      SECRET_KEY: weofjweifjewifjewifjewfewf
      DEBUG: "0"
      ALLOWED_HOSTS: "*"
      REDIS_HOST: "cache"
      REDIS_PORT: "6379"
      POSTS_TO_LOAD: "20"
      MESSAGES_TO_LOAD: "30"
      DATETIME_FORMAT: "%Y-%m-%d %H:%M"

  cache:
    container_name: cache
    restart: unless-stopped
    image: redis:7.2-alpine 
    ports:
      - 6379:6379
    command: redis-server
    volumes: 
      - cache:/data

  db:
    container_name: db
    image: postgres:16.3-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA =/var/lib/postgresql/data
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - .:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  client:
    container_name: client
    build:
      context: .
      dockerfile: ./Front/react/Dockerfile
    ports:
      - 80:80
    depends_on:
      - service
    environment:
      REACT_APP_SERVER_HostIp: "0.0.0.0"
      REACT_APP_SERVER_HostPort: "8080"

volumes:
  postgres-data: 
  cache:
    driver: local
